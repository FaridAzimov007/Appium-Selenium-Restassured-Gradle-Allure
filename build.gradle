plugins {
    id 'java'
    id "io.qameta.allure" version "2.11.2"
}

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    //JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
    testImplementation 'io.qameta.allure:allure-junit5:2.25.0'

    //Appium + Selenium
    implementation 'io.appium:java-client:8.6.0'
    implementation 'org.seleniumhq.selenium:selenium-java:4.11.0'

    //RestAssured + JSON
    implementation 'io.rest-assured:rest-assured:5.4.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'

    //Allure
    implementation 'io.qameta.allure:allure-junit5:2.24.0'

    //Logging
    implementation 'org.slf4j:slf4j-api:2.0.12'
    testImplementation 'org.slf4j:slf4j-simple:2.0.12'

    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-parameters", "-g", "-Xlint:unchecked"]
    options.fork = true
    options.forkOptions.jvmArgs = ['-Xmx512m']
}

tasks.register("smoke", Test) {
    useJUnitPlatform {
        includeTags("Smoke")
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register("regression", Test) {
    useJUnitPlatform {
        includeTags("Regression")
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17 // или 11, если нужно
}